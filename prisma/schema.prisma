// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  lastSeen      DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userSettings  UserSettings?
  Card          Card[]
  Deck          Deck[]
}

model UserSettings {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @unique
  // Audio playback speed min: 0.5 max: 2
  playbackSpeed      Float    @default(1)
  // Cards/day max
  cardsPerDayMax     Int      @default(21)
  // Value from 0 to 1 representing the percentage liklihood
  // of a random playback of the user's audio.
  playbackPercentage Float    @default(1)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Deck {
  id       Int    @id @default(autoincrement())
  langCode String
  name     String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Card     Card[]

  @@unique([name, userId])
}

model Card {
  id                    Int                  @id @default(autoincrement())
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  flagged               Boolean              @default(false)
  term                  String
  definition            String
  langCode              String
  // Gender can be "M"ale, "F"emale, or "N"eutral
  gender                String               @default("N")
  createdAt             DateTime             @default(now())
  Quiz                  Quiz[]
  imageBlobId           String?
  SpeakingCorrection    SpeakingCorrection[]
  mirrorRepetitionCount Int?                 @default(0)
  deckId                Int? // Nullable for gradual migration
  Deck                  Deck?                @relation(fields: [deckId], references: [id])

  @@unique([userId, term])
}

model Quiz {
  id          Int      @id @default(autoincrement())
  cardId      Int
  Card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  quizType    String
  stability   Float    @default(0)
  difficulty  Float    @default(0)
  firstReview Float    @default(0)
  lastReview  Float    @default(0)
  nextReview  Float    @default(0)
  lapses      Float    @default(0)
  repetitions Float    @default(0)
  RevLog      RevLog[]

  @@unique([cardId, quizType])
}

model RevLog {
  id          Int      @id @default(autoincrement())
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      Int
  lapses      Float
  repetitions Float
  difficulty  Float
  stability   Float
  firstReview Float
  lastReview  Float
  gradedAt    Float
  createdAt   DateTime @default(now())
}

model TrainingData {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  quizType           String
  yesNo              String
  explanation        String
  term               String
  definition         String
  langCode           String
  userInput          String
  englishTranslation String
}

model SpeakingCorrection {
  id         Int      @id @default(autoincrement())
  cardId     Int
  Card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  isCorrect  Boolean
  term       String
  definition String
  userInput  String
  correction String   @default("")
}
