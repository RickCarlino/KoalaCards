// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  lastSeen      DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userSettings  UserSettings?
  Card          Card[]
}

model UserSettings {
  id                  Int      @id @default(autoincrement())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String   @unique
  // Value from 0 to 1 representing the percentage chance
  // that a quiz will be a listening quiz (as opposed to speaking)
  listeningPercentage Float    @default(0.5)
  // Audio playback speed min: 0.5 max: 2
  playbackSpeed       Float    @default(1)
  // Cards/day max
  cardsPerDayMax      Int      @default(21)
  // Value from 0 to 1 representing the percentage liklihood
  // of a random playback of the user's audio.
  playbackPercentage  Float    @default(1)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  flagged    Boolean  @default(false)
  term       String
  definition String
  langCode   String
  createdAt  DateTime @default(now())
  Quiz       Quiz[]

  @@unique([userId, term])
}

model Quiz {
  id             Int    @id @default(autoincrement())
  cardId         Int
  Card           Card   @relation(fields: [cardId], references: [id])
  quizType       String
  stability      Float
  retrievability Float
  firstReview    Float
  lastReview     Float
  nextReview     Float
  lapses         Float  @default(0)
  repetitions    Float  @default(0)
}

// Used to optimize the w params via the FSRS optimizer.
model OptimizerLog {
  id           Int      @id @default(autoincrement())
  reviewTime   DateTime
  // reviewRating is an Int. Only legal values are 1,2,3,4:
  reviewRating Int
  quizId       Int
  cardId       Int?
}
