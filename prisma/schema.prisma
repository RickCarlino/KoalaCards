// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Phrase {
  id         Int     @id @default(autoincrement())
  term       String  @unique
  definition String
  Card       Card[]
  // The "User" relation is optional
  // "userId" is the foreign key
  userId     String?
  user       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Card {
  id             Int       @id @default(autoincrement())
  next_quiz_type String?
  last_win_at    DateTime?
  total_attempts Int       @default(0)
  loss_count     Int       @default(0)
  win_count      Int       @default(0)
  win_percentage Float     @default(0)
  flagged        Boolean   @default(false)
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phraseId       Int
  phrase         Phrase    @relation(fields: [phraseId], references: [id], onDelete: Cascade)
  // userID and PhraseID must be unique
  @@unique([userId, phraseId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  Phrase        Phrase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
